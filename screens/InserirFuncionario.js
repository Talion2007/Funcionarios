// Importa React e os hooks necess치rios
import React, { useState } from 'react';

// Importa componentes b치sicos da interface do React Native
import {
  View,        // Cont칡iner de layout
  Text,        // Componente de texto
  TextInput,   // Campo de entrada de texto
  Button,      // Bot칚o b치sico
  StyleSheet,  // Estiliza칞칚o inline
  Alert        // Caixa de alerta
} from 'react-native';

// Importa o m칩dulo SQLite do Expo
import * as SQLite from 'expo-sqlite';

// Vari치vel para armazenar a inst칙ncia do banco
let db;

// Fun칞칚o ass칤ncrona para abrir (ou criar) o banco de dados
const openDb = async () => {
  if (!db) db = await SQLite.openDatabaseAsync('funcionarios.db'); // Nome do banco
  return db;
};

// Componente principal para inser칞칚o de funcion치rio
export default function InserirFuncionario() {
  // Estados para armazenar os valores digitados nos inputs
  const [nome, setNome] = useState('');
  const [salario, setSalario] = useState('');
  const [cargo, setCargo] = useState('');

  // Fun칞칚o que insere um novo funcion치rio no banco
  const inserir = async () => {
    // Verifica se todos os campos foram preenchidos
    if (!nome || !salario || !cargo) {
      Alert.alert('Erro', 'Preencha todos os campos.');
      return;
    }

    try {
      const database = await openDb(); // Abre o banco

      // Executa o comando SQL para inserir o funcion치rio
      await database.runAsync(
        'INSERT INTO funcionarios (nome, salario, cargo) VALUES (?, ?, ?);',
        [nome, parseFloat(salario), cargo]
      );

      // Exibe mensagem de sucesso
      Alert.alert('Sucesso', 'Funcion치rio inserido com sucesso!');

      // Limpa os campos ap칩s inser칞칚o
      setNome('');
      setSalario('');
      setCargo('');
    } catch (error) {
      // Em caso de erro, exibe alerta e loga no console
      console.error('Erro ao inserir funcion치rio:', error);
      Alert.alert('Erro', 'Falha ao inserir funcion치rio.');
    }
  };

  // JSX: renderiza칞칚o da tela
  return (
    <View style={styles.container}>
      <Text style={styles.title}>Inserir Funcion치rio</Text>

      {/* Campo de entrada para o nome */}
      <TextInput
        placeholder="Nome"
        style={styles.input}
        value={nome}
        onChangeText={setNome}
      />

      {/* Campo de entrada para o sal치rio (aceita apenas n칰meros) */}
      <TextInput
        placeholder="Sal치rio"
        keyboardType="numeric"
        style={styles.input}
        value={salario}
        onChangeText={setSalario}
      />

      {/* Campo de entrada para o cargo */}
      <TextInput
        placeholder="Cargo"
        style={styles.input}
        value={cargo}
        onChangeText={setCargo}
      />

      {/* Bot칚o que chama a fun칞칚o de inser칞칚o */}
      <Button title="Inserir" onPress={inserir} />
    </View>
  );
}

// 游꿛 Estilos da interface
const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: 'lightyellow', // Cor de fundo clara
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
    textAlign: 'center',
  },
  input: {
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 5,
    padding: 10,
    marginBottom: 10,
  },
});
